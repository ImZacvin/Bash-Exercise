openapi: 3.0.1
info:
  title: PhotoBox API
  description: API documentation for managing photos, folders, and users in the PhotoBox application.
  version: 1.0.0
servers:
  - url: http://sigmaboy.cloud
    description: API URL

paths:
  /photos:
    get:
      summary: Get all photos
      description: Retrieve all photos for the authenticated user.
      responses:
        '200':
          description: A list of photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'

  /photos/{id}:
    get:
      summary: Get photo by ID
      description: Retrieve a specific photo by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '404':
          description: Photo not found

    delete:
      summary: Delete a photo
      description: Delete a specific photo by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo deleted successfully
        '404':
          description: Photo not found

  /photos/{id}/download:
    get:
      summary: Download a photo
      description: Download the photo file for a specific photo.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /photos/{id}/rename:
    patch:
      summary: Rename a photo
      description: Rename a specific photo by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
      responses:
        '200':
          description: Photo renamed successfully
        '400':
          description: Invalid request

  /photos/upload:
    post:
      summary: Upload a photo
      description: Upload a new photo to the system.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                folderId:
                  type: string
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'

  /folders:
    get:
      summary: Get all folders
      description: Retrieve all folders for the authenticated user.
      responses:
        '200':
          description: A list of folders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
    post:
      summary: Create a folder
      description: Create a new folder in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Folder created successfully

  /folders/{id}:
    get:
      summary: Get folder by ID
      description: Retrieve a specific folder by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '404':
          description: Folder not found

    delete:
      summary: Delete a folder
      description: Delete a specific folder by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Folder deleted successfully
        '404':
          description: Folder not found

  /users:
    post:
      summary: Register a user
      description: Register a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully

  /users/login:
    post:
      summary: Login a user
      description: Authenticate a user and return a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials

components:
  schemas:
    Photo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        size:
          type: integer
        mimeType:
          type: string
        folder:
          type: string
        userId:
          type: string

    Folder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        userId:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
